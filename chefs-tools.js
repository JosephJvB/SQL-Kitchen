const pgp = require('pg-promise')()

const DB = pgp({
	host: 'localhost',
	port: 5432,
	database: 'the_kitchen',
	user: 'postgres',
	password: 'postgres'
})

/*
	DB.one(`select 1 + 1 as answer`)
	.then(res => helper({DB, type: 'TEST', result: res}))
	.catch(err => helper({DB, type: 'TEST_ERROR', result: err}))
*/

// makeTable({table: 'limber_desk', columns: ['"id" integer generated by default as identity primary key', '"version" decimal', '"coffee_holder" boolean']})	
// insert({table: 'limber_desk', items: [{column: "version", value: 6.9}, {column: "coffee_holder", value: true}]})
// dropTable('limber_desk')

function makeTable({table, columns}) {
	const sqlColumns = columns.reduce((str, column, i) => `${str}${column}${i + 1 < columns.length ? ',' : ''}`, '')
	DB.one(`create table "${table}" (${sqlColumns})`)
		.then(res => helper({DB, type: 'CREATE_TABLE', result: res}))
		.catch(err => helper({DB, type: 'CREATE_TABLE ERROR', result: err}))
}

function dropTable(table) {
	DB.one(`drop table "${table}"`)
		.then(res => helper({DB, type: 'DROP_TABLE', result: res}))
		.catch(err => helper({DB, type: 'DROP_TABLE ERROR', result: err}))
}

function insert({table, items}) {
	const sqlColumns = items.reduce((str, item, i) => `${str}${item.column}${i + 1 < items.length ? ',' : ''}`, '')
	const sqlValues = items.reduce((str, item, i) => `${str}${item.value}${i + 1 < items.length ? ',' : ''}`, '')
	DB.one(`insert into ${table} (${sqlColumns}) values (${sqlValues}) returning *`)
		.then(res => helper({DB, type: 'INSERT', result: res}))
		.catch(err => helper({DB, type: 'INSERT_ERROR', result: err}))
}

function deleteLike({table, column, string}) {
	if(typeof string !== 'String') return console.error('deleteLike wants a string.\n You gave me a', typeof string, '=', string)
	DB.one(`delete from "${table}" where "${column}" ~ ${string} returning *`)
		.then(res => helper({DB, type: 'DELETE_LIKE', result: res}))
		.catch(err => helper({DB, type: 'DELETE_LIKE_ERROR', result: err}))
}

// used in .then&.catch after promise resolves
// I guess this gets subbed out when I need data to go back to the front end
function helper ({DB, type, result}) {
	DB.$pool.end()
	return console.log(type + ':', result)
}
